#!/bin/bash

set -eu

#############
# Functions
say_err() { echo "Error: $1" >&2 && exit 1; }
the_end() { echo "System update complete. Have a great day! :)" && exit 0; }

show_help() {
cat << EOF
Usage: autup [-huf]

Updates the system and removes orphaned packages.

-h              Print this message and exit.
-u              Update packages only.
-f              Update packages and remove orphans.
EOF
}

list_upgrades() {
echo -e "----------------------------------------------------------------------
[$(date +%F)]-[$(date +%H:%M)] ${1}: ${PKGS}
----------------------------------------------------------------------"
if [[ "${PKGS}" -gt 0 ]]; then
  cat "${TEMP_LOG}"
else
  echo "Nothing for today."
fi
echo -e "----------------------------------------------------------------------\n"
}

write_log() {
declare -r LOGS_DIR="${HOME}/.local/share/autup"
declare -r LOGS="${LOGS_DIR}/autup.log"
[[ ! -d "${LOGS_DIR}" ]] && mkdir -p "${LOGS_DIR}"
{ list_upgrades "Packages Upgraded"; } >> "${LOGS}"
}

parse_upgrades() {
case $PKGMAN in
  pac) pacman -Qu 2> /dev/null | awk '{print $1" = ["$2"] -> ["$4"]"}' > "${TEMP_LOG}" ;;
  apk) apk list -u 2> /dev/null | awk 'match($0, /\:/){print "["substr($0, RSTART+2)" -> ["$1"]"}' > "${TEMP_LOG}" ;;
esac
PKGS=$(wc -l < "${TEMP_LOG}")
}

update_db() {
case $PKGMAN in
  pac) doas pacman -Sy ;;
  apk) doas apk update ;;
esac
}

update_pkgs() {
case $PKGMAN in
  pac) doas pacman -Su --noconfirm ;;
  apk) doas apk upgrade ;;
esac
}

remove_orph() {
case $PKGMAN in
  pac) doas pacman -Rns --noconfirm "$(pacman -Qtdq)" ;;
esac
}

check_up() {
update_db
parse_upgrades
list_upgrades "Updates Available"
}

upgrade_all() {
check_up
if [[ "${PKGS}" -gt 0 ]]; then
  update_pkgs
  write_log
fi
}

full_service() {
upgrade_all
remove_orph
}

main() {
[[ "$(id -u)" -eq 0 ]] && say_err "cannot be run as root."

if [[ -a "/etc/pacman.conf" ]]; then
  declare -r PKGMAN="pac"
elif [[ -d "/etc/apk" ]]; then
  declare -r PKGMAN="apk"
else
  say_err "no package manager found."
fi

if [[ "$#" -lt 1 ]]; then
  say_err "atleast one argument expected."
elif [[ "$#" -gt 1 ]]; then
  say_err "only one argument expected."
fi

TEMP_LOG="$(mktemp)"
declare -i PKGS=0

while getopts ":hcuf" args; do
  case $args in
    h) show_help && exit 0 ;;
    c) check_up ;;
    u) upgrade_all ;;
    f) full_service ;;
    ?) say_err "-${OPTARG} is not a valid argument." ;;
  esac
done
shift $((OPTIND - 1))
}

################
# Script Start #
################
main "$@"